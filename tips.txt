**Interview Strategies**

1) Understand the Problem
2) Explore Concrete Examples
3) Break it Down
4) Solive/simplify
5) Look Back and Refactor


**Problem Solving Patterns**
+ Frequency Counter
+ Multiple Pointers
+ Sliding Window
+ Divide and Conquer
+ Greedy Algorithms
+ Backtracking


**Sliding Window**
This pattern involves creating a window which can either be an array or number from one position to another.
Depending on a certainc ondition, the window wither increases or closes(and a new window is created)
Very useful for keeping track of a subset of data in an array/string etc.


**Divide and Conquer **
This pattern involves dividing a data set into smaller chunks and then repating a process with a
subset of data. This pattern can tremendously decrease time complexity.


**What is Recursion?**
A process (a function in our case) that calls itself.
  Two essential parts of a recursive function:
  -Base Case: The condition when the recursion ends.
  -Different Input

  **Pure Recursion Tips**
  - For arrays, use methods like slice, the spread, and concat that make
  copies of arrays so you do not mutate them.
  -Remember that strings are immutable so you will need to use methods like slice, subst, 
  or substring to make copies of strings.
  -To Make copies of objects use Object.assign, or the spread operator.